include ../_includes/_mixins

p If I was god of the internet and could create any service I wanted, here's what I would make: The most reliable cloud-based service ever that manages everything I need and natively integrates with all my devices, forever. There are several reasons why this is problematic and not quite realistic, but it's something I've been dreaming of for a long time.

p A few years ago, I became obsessed with having the #[em perfect] decluttered workflow. I still worked in an office most of the time and to make sure I had all my tools, files and notes available at hand from everywhere, I switched entirely to web apps. My browser became my go-to program for everything and it became increasingly less productive. I'd constantly get stuck in my routine of jumping between countless tabs of email, feed reader, bookmarks and social media and the occasional incognito tab to sign into the same service with two different accounts. But now that I almost exclusively work on my own computer, I finally made a decision: I want my browser back and I'm switching to desktop apps!

p However, relying on too many tools and apps sucks, since you never know who's gonna be the next #[+a("https://medium.com/swlh/the-unreliable-startup-69461f629383") unreliable startup]. No matter how shiny and perfect the app looks and no matter how many people are raving about it on ProductHunt right now, there's a high chance you will end up stuck with an outdated and inconvenient program in a few years time. And the longer you keep using the service as an integral part of your workflow, the harder it gets to replace it. This is exactly what happened to me with #[+a("https://www.evernote.com") Evernote]. I used it for random notes and bookmarks, as design resources manager and to save memes, screenshots, code snippets and even entire e-books. But with the bulky UI and my thousands of notes, it eventually became my most hated application that I dreaded opening. I finally had to admit to myself that maybe, combining everything into one service maybe wasn't the best idea after all. And knowing that Evernote's days #[+a("https://syrah.co/joshdickson40/55e1beac15970d6c01395d9d") are numbered], it was time to leave.

p It's easy to waste time on creating the perfect productive workflow instead of actually being, you know, productive, and a big part of the "productivity hacking" community probably has as much substance as the #[+a(url + "/i-fell-for-self-help-so-you-dont-have-to") self-help community] (i.e. zero). But if you are, like me, very sensitive to small inconveniences and frustrations, good programs that do their job efficiently and look so nice that even seeing the little dock icon makes you happy, can have a huge impact on your life. Here are the four apps that helped me free my browser of the unnecessary webapp clutter and made life and work a little more fun.

hr

+h(2) 1. Polymail

p Before I came across #[+a("https://polymail.io") Polymail] on ProductHunt, I had already spent months looking for a decent Gmail desktop client and my search had turned out to be extremely disappointing. Most of the apps I tried were simply a browser loading Gmail (what's the point?), ugly and full of UX annoyances, or they would only import my emails instead of syncing them with Gmail. #[+a("https://www.nylas.com/n1") Nylas N1] came pretty close and while I generally liked the "hackable" open source approach, I didn't want most of my email client's functionality to depend on third-party plugins only.

p Polymail immediately caught my eye and, most importantly, it seamlessly integrated with Gmail. It also offers a bunch of handy features, like email tracking (I was #[em so] happy when I finally got to ditch those spammy Chrome extensions I used before), a "send later" option (for those work emails you write at 4am), a "read later" button that makes emails reappear in the inbox after a certain set time, and a beautiful minimalistic UI with a lot of attention to detail. Polymail is still in private beta but you get in by #[+a("https://polymail.io") signing up] on their website or #[+a("https://twitter.com/PolymailApp") asking nicely] on Twitter.

+image("desktopapps_polymail.jpg", false, "Screenshot of Polymail")

+h(2) 2. Leaf

p After Google killed Google Reader — and yes, I'm still bitter about this — I eventually switched to #[+a("https://feedly.com") Feedly]. #[+a("#") Leaf] lets you login with your Feedly account and offers a very straightforward and beautiful reading experience. My favourite view is the "clutter-free article" mode – it downloads the full article and displays a reading-friendly version. Even if the RSS feed only displays the excerpt, now I can finally read the entire post without having to leave my feed reader.

+image("desktopapps_leaf.jpg", false, "Screenshot of Leaf")

+h(2) 3. Pocket

p A big issue with Evernote was that I saved #[em everything] I found remotely interesting, no matter how random or useless it turned out to be. While sorting through my 3+ years of saved content, I found tons of random unfunny memes, dead bookmarks, basic recipes for things I'd just google anyways or articles about some random jQuery plugin that was cool in 2012. The app that I initially introduced into my workflow to declutter became one of the biggest sources of clutter.</p>

p #[+a("https://getpocket.com") Pocket], formerly Read It Later, is mostly a bookmark organiser, but the premium version also saves and downloads the articles to make sure you can still access the original article, even when it gets changed or removed. While the desktop UI is pretty but fairly basic (I'd love to see more options for bulk editing and different display modes in the future), it does its job and helps me be more selective about the stuff I bookmark. It also integrates amazingly well: I can obviously bookmark articles straight from my browser, but also send them to Pocket from Leaf or any other app via the native share button, from both my computer and my phone.

+image("desktopapps_pocket.jpg", false, "Screenshot of Pocket")

+h(2) 4. Pixave

p I know, I know, #[em another] desktop app to replace Evernote. While I initially liked Evernote's ability to save complex notes consisting of text, images and file attachments, it turned out to be massively impractical to organise design resources, images and visual inspiration. There were no previews available for PSD or AI files and exporting my collection turned out to be difficult because all images and files were only "attachments". I now find myself paying increasingly more attention to the exporting options before using a new app or service, so using an image organiser that's essentially just a prettier finder with a bunch of added functionality was appealing. If I ever want to move, I can simply drag and drop my files elsewhere.

p #[+a("http://www.littlehj.com") Pixave] is an image manager for designers. It supports, previews, converts and exports all common file formats including PSD, AI, Sketch and PDF, lets you organise your files with folders, collections and tags, filters your resources by colour and comes with a little screencap tool to easily snap website screenshots. I usually have the "Pixave Mini" window open in the background so I can drag and drop files on there anytime. The only thing that's missing to make it the go-to web development app for me: It only supports image files and PDFs so there's obviously no decent way to use it to also manage other non-image resources like code snippets. #[+a("https://www.renfei.org/snippets-lab/") Snippets Lab] looks promising for that but I'm sort of hesitant to use yet another app for such a specific task.

+image("desktopapps_pixave.jpg", false, "Screenshot of Pixave")

+divider

p While this may not be the perfect setup forever, it's definitely a huge improvement and it has taught me an important lesson: Whatever you do, don't get stuck in too many ecosystems at once. There's a fundamental problem with apps and services that focus on improving workflows: Instead of working with and extending existing ecosystems that their users are already a part of, they often create their very own from scratch and instantly make the user dependent. Simple files like images and text, or plain organised lists suddenly become complex data types that only exist in the context of the app that they were created in.

p Web apps and web services keep tools flexible and portable, and their popularity has made the browser the most important program on people's computers. This is great, but it quickly becomes messy. A web browser is not (yet) a functional replacement for an operating system. Moving my most important tasks over to much more powerful applications finally freed my browser and let it focus on what it does best: browsing the internet.
