include ../_includes/_mixins

p A few months ago I #[+a(url + "/blog/why-i-left-wordpress", true) said goodbye to WordPress] and switched my site over to Anchor CMS. It was a very refreshing experience but after reading about yet another round of security warnings and realising that I was writing all my blog posts in a text editor anyways, I knew it was time for a change. I set up #[+a("https://jekyllrb.com") Jekyll], converted my theme and went 100% static.

+h(2) Why Static?

p Most personal blogs don't actually need a heavyweight content management system like WordPress. It's funny to call WordPress a "heavyweight CMS" when it used to be the only decent CMS that wasn't a bulky monster. But here's the thing: People's needs and expectations have changed. Nowadays, a popupar CMS needs to cover every possible need a user might have and make it as easy as possible for everyone to use it.

p The advantages of content management systems are all great for large-scale digital publishing: a straightforward interface that even your mum can use, an easy integration of third-party services and seamless database communication. But realistically, my blog doesn't need a back-end that makes publishing easy for #[em everyone]. The only person writing, publishing and editing here is me so it needs a workflow that makes it easy for #[em me].

p Smashing Magazine's #[+a("https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/") recent article] on static website generators made a really good point: In a way, Dreamweaver and FrontPage (or even Adobe GoLive – oh, the memories!) were the original static website generators. Using a WYSIWYG interface, they let you put together websites with reusable components and when you hit save, it created a static page which you could then upload to your web server.

+quote("Why Static Website Generators Are The Next Big Thing, Smashing Magazine", "https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/") With the maturation of browsers, many features that used to require dynamic code running on a server can be moved entirely to the client. Want comments on your website? Add Disqus, Isso or Facebook comments. Want social integration? Add Twitter or Facebook’s JavaScript widget to your website. Want real-time data updating live on your website? Add a squirt of Firebase.

p Generating your entire website #[em on] the server with all your data stored there doesn't only make your website incredibly vulnerable to attacks and various other problems, it can also make it incredibly slow. Every pageview most likely requires a server and database request, which is why every larger website probably uses some form of caching to deliver their content to the users. That basically means: Dynamic content is temporarily turned into static content in order to improve performance and stability.

p So why not go static in the first place?

+h(2) Build the Blog System You've Always Wanted

p WordPress and similar blogging software got us very used to just accepting what's there. You log in, hit "New Post", fill in the fields and you're done. Custom fields and custom templates are totally possible, but it's very easy to find yourself simply tweaking what's already there (with varying results) instead of actually creating what you #[em really] need.

p It's actually pretty inspiring and fun to start this whole process all over again from scratch and ask youself the most basic questions:

+list
    +item What information do I want to store with each blog post?
    +item How do I want to use and display those pieces of information?
    +item What settings or logic do I want to implement?
    +item How do I want to organise my files?


p For example, here's what it says at the top of this blog post:

+code("yaml").
    title: "The ultimate guide to static websites with Jekyll"
    subhead: "Going static for beginners – with free template!"
    categories: [ 'web', 'code', 'tutorial' ]
    layout: post

    image: "jekyll.jpg"
    color: "#CD1E23"
    highlight_code: true

p For each blog post, I set the layout to #[code post] so it uses my blog post template. I also store a title and a subhead, a list of categories, the name of the title image, a custom colour and a bunch of other random settings. For example, if I set #[code highlight_code] to #[code true], it includes the syntax highlighter and displays all code highlighted. There's also #[code readmore] which automatically displays a "Read more" button at the bottom of a blog post linking to whichever URL I add. Sure, there might be best practices, but yes, you can totally come up with all of those things yourself!

+h(2) The Setup

p If you're familiar with the command line and/or already have Ruby (and Ruby Gems) installed, simply skip this part and go ahead and install the #[+a("https://jekyllrb.com/docs/installation/#install-with-rubygems") Jekyll Gem]. If not, don't worry, it's easy. The idea of building your blog and doing this in the Terminal might seem weird at first, but you'll mostly be using one simple command only.

+list('numbers')
    +item #[strong Install version 2.0 of the programming language #[+a("https://www.ruby-lang.org") Ruby].] If you use OSX Mavericks or a newer version, it should already be there. To check, type in #[code ruby -v]. Otherwise, there are plenty of #[+a("https://www.ruby-lang.org/en/documentation/installation/") tools] to help you install it. If you're on a Mac, make sure that you also have the #[+a("http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/") Xcode Command Line Tools] installed.
    +item #[strong Install the #[+a("https://jekyllrb.com/docs/installation/#install-with-rubygems") Jekyll Gem].] Ruby comes with RubyGems, a package manager that lets you install plugins and libraries easily. To install, type in #[code gem install jekyll]. If you get an error saying you don't have the right permissions, use #[code sudo gem install jekyll] and type in your admin password. That's it!


+h(2) How It Works

p To get a feeling for the file structure, it's important to understand how Jekyll works: Every time you run #[code jekyll build] in your website folder, it goes through all the files and folders and compiles your website into #[code _site]. You end up with all your source files and a perfect, ready-to-upload static copy of your website in your #[code _site] folder.

+list
    +item #[strong Posts in the #[code _posts] folder] all need to have names like #[code 2015-11-01-your-post-title.html] (or #[code .md] if you prefer to write in Markdown)
    +item #[strong Files and folders #[em without] an underscore (_)] are simply copied over – this is great for images, fonts, stylsheets and scripts
    +item #[strong Drafts in the #[code _drafts] folder] are not compiled by default, but you can optionally preview/build your site with drafts
    +item #[strong Pages] can be saved as files in your main folder (for example, #[code about.html]) or as an index in their own folder (for example, #[code about/index.html])
    +item #[strong #[code .sass], #[code .scss] and #[code .coffee] files] are compiled automatically in the same location
    +item #[strong Settings and all basic configuration], like the page title, the site URL, the permalink structure or the time zone, live in a file called #[code _config.yml]


+h(3) Example structure

p Here's an example very similar to the structure of this blog, #[+a(url) ines.io]:

+code.
    ├── _config.yml
    ├── _drafts
    |   └── this-is-a-draft-post.html
    ├── _includes
    |   ├── footer.html
    |   ├── head.html
    |   ├── header.html
    |   └── share-buttons.html
    ├── _layouts
    |   ├── default.html
    |   ├── page.html
    |   └── post.html
    ├── _plugins
    |   └── rssgenerator.rb
    ├── _posts
    |   ├── 2015-11-01-this-is-a-blog-post.html
    |   └── 2015-11-02-this-is-another-blog-post.html
    ├── _site
    ├── assets
    |   ├── css
    |   ├── fonts
    |   ├── img
    |   └── js
    ├── about.html
    └── index.html

+h(2) Creating Your Own Template

p The #[+a("https://github.com/jekyll/jekyll/wiki/Sites") Jekyll Wiki] provides a #[em very] long list of websites using Jekyll to get inspired (all open source, of course!) but ultimately, it's up to you how you decide to structure your site – which can be #[em super] overwhemlming.

p To get you started, I've put together a basic skeleton template for a personal blog. It includes all the required files, a nice and clean structure, examples for all the cool stuff you can do (layouts, includes, custom logic) and descriptions here and there to help you understand what all those files are about. I only added the most basic formatting so the rest is up to you.

+image("jekyll_skeleton.jpg", false, "Screenshot of skeleton blog template")

p.u-text-center
    +button("https://github.com/" + profiles.github + "/pretty-jekyll-skeleton/") View Skeleton Theme on GitHub

p This template is already complete and ready to test. To give it a try, open the Terminal, navigate to your website folder (#[code cd websites/my-cool-website]), then run #[code jekyll serve]. Wait for it to complete and check out the #[code _site] folder. Jekyll simulates a local server to preview your site at #[code http:&#47;&#47;localhost:4000]. To stop the server, press CTRL + C.

+h(3) The configuration

p The #[code _config.yml] file contains all global information about your site. Here's an example from my skeleton theme:

+code("yaml").
      name: My Blog
      description: This is my blog where I post stuff
      author: Me
      permalink: /blog/:title
      timezone: Europe/Berlin

      email: me@domain.com
      twitter: mytwitteraccount

      # This is the default that's used to preview.
      # Change this to your website's URL when you publish your site.
      url: http://localhost:4000

p The #[code url] is set to your localhost, the location Jekyll uses to preview your site. Once you're done and the site is ready to go live, you can replace it with your domain and build your site.

p The permalink setting will create links like #[code domain.com/blog/this-is-a-post]. All global variables above can be used in our theme. Writing #[code &#123;&#123;site.name&#125;&#125;] for example will return "My Blog" anywhere in our templates. If you want to display a link to your Twitter account somewhere, you could do this:

+code.
      &lt;a href="https:&#47;&#47;twitter.com/&#123;&#123;site.twitter&#125;&#125;"&gt;Follow me on Twitter!&lt;/a&gt;

+h(3) The templating language

p Jekyll uses the templating engine #[+a("http://liquidmarkup.org/") Liquid] which comes with easy to write and easy to read template tags. No more messy PHP or template tags you don't actually understand. Let's look at the file #[code post.html] in the #[code _layouts] folder. It contains the basic template for a blog post:

+code.
    ---
    layout: default
    ---

    &lt;article class="single"&gt;
    &lt;header&gt;
        &lt;+h(2)&gt;&#123;&#123;page.title&#125;&#125;&lt;/+h(2)&gt;

        &#123;% if page.subhead %&#125;
          &lt;+h(3) class="subhead"&gt;&#123;&#123;page.subhead&#125;&#125;&lt;/+h(3)&gt;
        &#123;% endif %&#125;

        &lt;div class="meta"&gt;by &#123;&#123;site.author&#125;&#125; on &#123;&#123; page.date | date: "%B %d, %Y" &#125;&#125;&lt;/div&gt;

        &#123;% if page.image %&#125;
        &lt;div class="image"&gt;
          &lt;img src="&#123;&#123;site.url&#125;&#125;/assets/img/&#123;&#123;page.image&#125;&#125;" /&gt;
        &lt;/div&gt;
        &#123;% endif %}
    &lt;/header&gt;

    &lt;div class="content"&gt;
      &#123;&#123;content&#125;&#125;

      &#123;% if page.readmore %&#125;
        &lt;a href="&#123;&#123;page.readmore&#125;&#125;" class="readmore"&gt;Read more&lt;/a&gt;
      &#123;% endif %&#125;

      &#123;% include share-buttons.html %&#125;
    &lt;/div&gt;
    &lt;/article&gt;

p The Front Matter block at the beginning tells Jekyll to use our default page template #[code default.html] in the same folder for the page and insert everything in this file as the content. It inserts the page title as a headline and – only if it exists – the subhead. It also inserts the author name and formats the date as "December 14, 2015" (for more options, check out #[+a("http://alanwsmith.com/jekyll-liquid-date-formatting-examples") this blog post]). Once you build the site, all the main blog content will be inserted in place of #[code &#123;&#123;content&#125;&#125;].

p If an image or a "read more" link exists, it's displayed and after the main content, it includes an external file, #[code share-buttons.html]. All content elements that you want to reuse – like share buttons, but also the header, footer or even a specific teaser used for certain posts – should be saved as individual files in #[code _includes].

+h(3) The loop

p Here's an excerpt from our #[code index.html] that contains a loop to display all posts:

+code.
    &#123;% for post in site.posts %&#125;
    &lt;article&gt;

      &#123;% if post.image %&#125;
      &lt;div class="image"&gt;
        &lt;a href="&#123;&#123;site.url&#125;&#125;&#123;&#123;post.url&#125;&#125;"&gt;
          &lt;img src="&#123;&#123;site.url&#125;&#125;/assets/img/&#123;&#123;post.image&#125;&#125;" /&gt;
        &lt;/a&gt;
      &lt;/div&gt;
      &#123;% endif %&#125;

      &lt;+h(2)&gt;&lt;a href="&#123;&#123;site.url&#125;&#125;&#123;&#123;post.url&#125;&#125;"&gt;&#123;&#123;post.title&#125;&#125;&lt;/a&gt;&lt;/+h(2)&gt;

      &lt;div class="excerpt"&gt;
        &#123;&#123;post.excerpt | strip_html | strip_newlines&#125;&#125;
      &lt;/div&gt;

    &lt;/article&gt;
    &#123;% endfor %&#125;

p #[code &#123;&#123;post.excerpt | strip_html | strip_newlines&#125;&#125;] displays an excerpt from the post and adds two #[+a("https://github.com/Shopify/liquid/wiki/Liquid-for-Designers#advanced-output-filters") filters]: it removes all HTML and all new lines to make sure the excerpt only contains text.

+h(2) Building the Site

p To build your site, navigate to your website folder (#[code cd websites/my-cool-website]), then run #[code jekyll build], wait for it to complete and check out the #[code _site] folder. Another big advantage is that you can play around with your site as much as you like, build it locally, test it and if you like it, decide that it's time to upload it.

+h(3) The most important commands

+list
    +item #[code jekyll build]
    +item #[code jekyll build --drafts] — include drafts
    +item #[code jekyll build --watch] — automatically rebuild if there are changes
    +item #[code jekyll build --safe] — disable custom plugins
    +item #[code jekyll serve] — creates a preview of the site at #[code http:&#47;&#47;localhost:4000/]

+image("jekyll_terminal.jpg", false, "Screenshot of terminal output after successful serve")

p Of course you can also combine the flags. #[code jekyll serve --drafts --safe] for example previews your site with drafts and without custom plugins. The simplicity of the commands makes it very easy to integrate the build process into your existing workflow – and a lot of people have created excellent tools based on it, for example this very versatile #[+a("https://packagecontrol.io/packages/Jekyll") Jekyll Package for Sublime Text] that lets you build your site straight out of your editor and adds a bunch of helpful shortcuts.

+h(3) Uploading the site

p The easiest way to upload your site is to simply copy the contents of your #[code _site] folder to the right location on your FTP server. I personally like using #[+a("https://github.com/dmathieu/glynn") Glynn] which also comes as a gem and lets you store your FTP login details in your #[code _config.yml] – so all you have to do is type #[code glynn] and it automatically builds your Jekyll site and uploads it to your server.

+h(2) Plugins

p Before going static, I was worried about all the seemingly "dynamic" elements of my blog, like my RSS feed. But of course, that was kinda stupid. Every time my site is updated and rebuilt, it also rebuilds my RSS feed, making sure it stays "dynamic". There are a bunch of #[+a("https://jekyllrb.com/docs/plugins/#available-plugins") additional plugins] and third-party services you can use (sparingly) too add custom functionality. Here are some of my favourites:

+list
    +item #[+a("https://github.com/agelber/jekyll-rss") RSS Feed Generator] — probably the easiest way to add a simple RSS feed to your site
    +item #[+a("https://github.com/stereobooster/jekyll-press") Jekyll Press] — automatically minifies HTML, JavaScript and CSS files
    +item #[+a("https://disqus.com/admin/signup/") Disqus] – adds a modern comment system to any site (click #[+a("https://help.disqus.com/customer/portal/articles/472138-jekyll-installation-instructions") here] for a Jekyll tutorial)

p When it comes to plugins, an important question to ask yourself is: Do I actually want this and if so, does it make sense to install a plugin for it? WordPress comes with an enormous range of built-in functionalities and an almost ridiculous amount of random easy to install plugins on top of that, including #[em a lot] of useless and badly developed stuff. This has resulted in people running simple blogs with 50+ plugins and completely losing touch with their CMS.

p For example, many users don't think twice about using comments because it's built in by default, even though their blog might not actually need it. Similarly, adding simple share buttons to a post should #[em never] require a plugin, especially considering how #[+a("https://github.com/" + profiles.github + "/pretty-jekyll-skeleton/blob/master/_includes/share-buttons.html") fucking easy] it is to add and style them yourself.

+h(2) Tips &amp; Tricks

p Since you can basically build your template and the underlying logic from scratch, you can easily recreate whatever you liked the most about your previous CMS. Here are a few simple tips and tricks.

+h(3) Pretty URLs for pages and RSS feeds

p If you only have very few pages, it might seem annoying to save them as the #[code index.html] of their own folder, just so you can use #[code domain.com/about]. To automatically rewrite the URLs, add this to your #[code .htaccess] file on your server (or create one – go #[+a("http://code.tutsplus.com/tutorials/the-ultimate-guide-to-htaccess-files--net-4757") here] for more info and tips):

+code("apacheconf").
    &lt;IfModule mod_rewrite.c&gt;
    RewriteRule ^feed$ feed.xml [L]
    RewriteRule ^about$ about.html [L]
    &lt;/IfModule&gt;

p Each request to #[code domain.com/about] will now automatically show the file #[code about.html]. By the way, this is also very similar to how WordPress or your old CMS did it!

+h(3) Dynamic page titles

p Sometimes you want to display a different page title, depending on whether you're on the home page or a blog post or page. Simply add this to your site's #[code &lt;head&gt;], in my skeleton theme, this is in the #[code header.html]:

+code.
    &lt;title&gt;
    &#123;% if page.title %&#125;
      &#123;&#123; page.title &#125;&#125; | &#123;&#123;site.name&#125;&#125;
    &#123;% else %&#125;
      &#123;&#123; site.name &#125;&#125;
    &#123;% endif %&#125;
    &lt;/title&gt;

p In human language, here's what it says: If a #[code page.title] exists (which must mean that we're one a blog post or page), display it followed by the title of the site. For example: "This is a blog post | My Blog". Otherwise, just displays the #[code site.title]. For example: "My Blog".

+h(3) Style posts differently based on category

p To add tags or categories to your posts, simply add a list of them to the Front Matter block at the top of your post:

+code("yaml").
    categories: [ 'web', 'code', 'tutorial' ]

p To add classes named #[code category-web], #[code category-code] and #[code category-tutorial] to the post, you can simply do this within your loop in the #[code index.html]:

+code.
    &lt;article class="&#123;% for category in post.categories %&#125;category-&#123;&#123;category&#125;&#125; &#123;% endfor %&#125;"&gt;
    &lt;!-- your post stuff goes here --&gt;
    &lt;/article&gt;

p This goes through every category that's assigned to the post, and adds a class named #[code category-name] for each one. In your CSS you could then do something like #[code .category-web { background: blue; }].


+h(3) Separate previewing from publishing

p Once you like the look and feel of your site and decide to publish it, you will have to change the site URL from #[code localhost] to your website's URL in your config file. But changing the paths back and forth between previewing and publishing can be pretty annoying and lead to errors (like accidentally publishing your site with the wrong links).

p A simple trick to solve this problem is to use two different config files. Here's the command I use to preview and test my site:

+code("bash").
    jekyll serve --config _config_local.yml --drafts --safe

p The #[code _config_local.yml] file uses the local paths. When I run #[code jekyll build], it uses the default #[code _config.yml] with my domain set as the URL. This system also makes it possible to add other settings and variables to your local preview version.

p For example, you could add #[code preview: true] to your local config file to easily preview and test new parts of your theme locally. If you build the site using the regular config file, those parts won't even be rendered and created. You can do this by using template logic:

+code.
    &#123;% if site.preview %&#125;
      stuff that's only displayed when the site is previewed locally using _config_local.yml
    &#123;% endif %&#125;]

+h(3) Combine commands and create your own

p The more time I spent working with Jekyll, the more I appreciated the simplicity of the command line build process. Using separate programs to compile the code, optimise the images, upload the files and so on suddenly seemed so inefficient compared to typing in a simple command.

p The perfect example: Before building and uploading my site, I want to check the images and compress them if possible. This #[+a("https://github.com/JamieMason/ImageOptim-CLI") ImageOptim adddon for the command line] lets you do that by simply typing something like #[code imageoptim --directory assets/img].

p You don't want to end up with 10 different commands you have to remember and type in to publish your blog so we're simply gonna create our own. This, once again, is surprisingly easy. All you have to do is create a text file, name it something like #[code publish-blog] (no file extension necessary) and add your list of commands:

+code("bash").
    #!/bin/bash
    imageoptim --directory assets/img
    jekyll build

p This runs #[+a("https://imageoptim.com") ImageOptim] in our image folder and then builds the site. If you're on a Mac, place the file in the #[code /usr/local/bin] folder (you can easily get there by clicking "Go to" in the Finder and "Go to folder..."). To turn it into a command, we just need to change the file permissions and make it executable using this command:

+code("bash").
    chmod +x /usr/local/bin/publish-blog

p Now all you have to do is type #[code publish-blog] into the command line!

+h(2) Helpful Links &amp; Resources

+list
    +item #[+a("https://jekyllrb.com/docs/home/") The official Jekyll Docs] for even more details and in-depth explanations
    +item #[+a("https://github.com/" + profiles.github + "/pretty-jekyll-skeleton") My very simple skeleton template] for a personal blog to get you started and help create your first custom blog design
    +item #[+a("https://github.com/barryclark/jekyll-now") Jekyll Now] helps you set up Jekyll with GitHub Pages in only a few minutes – without touching the command line
    +item #[+a("http://ricostacruz.com/cheatsheets/jekyll.html") Jekyll Cheatsheet] is a nice and clean list of the most important formatting rules
    +item #[+a("https://github.com/Shopify/liquid/wiki/Liquid-for-Designers") Liquid for Designers] explains the templating language Liquid (which is used in Jekyll templates) and all its possibilities in detail
    +item #[+a("https://www.staticgen.com/") StaticGen] lists over 100 static website generator and a lot of interesting alternatives
